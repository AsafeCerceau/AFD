# 1 ) Linguagem: Palavras que terminam com a letra 'a'.
# Exemplo válido: "casa" – Inválido: "caso"

input: 'caso'
blank: ' '
start state: q1
table:
 q1:
  [A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,X,W,Y,Z]: R
  [a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,x,w,y,z]: R
  [0,1,2,3,4,5,6,7,8,9]: R
  ' ': {L: q2} #Se não terminar com 'a', volta pra última letra e encerra o código
 q2:
  'a': {R: final } # Se terminar com 'a', vai para a direita (espaço em branco) e finaliza
 final:

#2) Cadeias que contêm exatamente três caracteres '1'.
#Exemplo válido: "10101" – Inválido: "110A"

input: '11AZaz00az'
blank: ' '
start state: q1
table:
 q1:
  [A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,X,W,Y,Z]: R
  [a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,x,w,y,z]: R
  [0,2,3,4,5,6,7,8,9]: R
  '1': {R: q2}
 q2:
  [A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,X,W,Y,Z]: R
  [a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,x,w,y,z]: R
  [0,2,3,4,5,6,7,8,9]: R
  '1': {R: q3}
 q3:
  [A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,X,W,Y,Z]: R
  [a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,x,w,y,z]: R
  [0,2,3,4,5,6,7,8,9]: R
  '1': {R: final}
  #Se a cadeia tem '1', ela finaliza
  #Se a cadeia tem menos de 3 '1', ela continua e encerra
  #Se tem mais de 3 '1', ela encerra
 final:

#3) Cadeias que não contêm dois zeros consecutivos.
#Exemplo válido: "101010" – Inválido: "1001"

input: '11010101010101'
blank: ' '
start state: q1
table:
 q1:
  [A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,X,W,Y,Z]: R
  [a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,x,w,y,z]: R
  [1,2,3,4,5,6,7,8,9]: R
  '0': {R: q2}
 q2:
  '0': {L: leitura1} # Se começar com 0, volta 1 casa
  [A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,X,W,Y,Z]: {R: q1}
  [a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,x,w,y,z]: {R: q1}
  [1,2,3,4,5,6,7,8,9]: {R: q1}
 leitura1:
  '0': {R : final} #Se começar com 0, encerra. Diretamente ligado ao q2
  [A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,X,W,Y,Z]: {R: q1}
  [a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,x,w,y,z]: {R: q1}
  [1,2,3,4,5,6,7,8,9]: {R: q1}
 final:

#4) Palavras com parênteses balanceados.
#Exemplo válido: "((()))" – Inválido: "(()"

Resolução:

input: '((()))'
blank: ' '
start state: ABREP
table:
  ABREP:  
   '(' : R
   ')' : { write: '#' , L: FECHAP } # substitui ')' por '#' e vai pra esquerda
   '#' : R
  FECHAP:
   '(' : { write: '#' , R: ABREP } #substitui '(' por '#' e vai pra direita
   '#' : L
   
   #O Loop segue até todos os '(' e ')' serem substituidos


#5) Palíndromos com alfabeto {a, b} de tamanho par.
#Exemplo válido: "abba" – Inválido: "abab"

#Resolução Parciel - Melhore ou Adapte a solução abaixo:# solução do site https://turingmachine.io/

input: 'baab' 
blank: ' '
start state: start
synonyms:
  accept: {R: accept}
  reject: {R: reject}

table:
  start:
    a: {write: ' ', R: haveA}
    b: {write: ' ', R: haveB}
    ' ': accept # string vazio, palíndromo válido
    
  haveA:
    [a,b]: R
    ' ': {L: matchA} #Ao chegar ano fim, volta uma posição à esquerda e compara o caractere com o que foi lido no começo.
    
  haveB:
    [a,b]: R
    ' ': {L: matchB}
    
  matchA:
    a: {write: ' ', L: back} #se achar 'a' no final, apaga e vai pra esquerda
    b: reject #se achar 'b', rejeita
    ' ': reject #Se sobra um símbolo sozinho, rejeita
    
  matchB:
    b: {write: ' ', L: back} 
    a: reject
    ' ': reject
    
  back:
    [a,b]: L
    ' ': {R: start}
  accept:
  reject:


#6) Toda a que vem deve ser seguida por dois b.
#Exemplo válido: "abbabb" – Inválido: "ababb"

input: 'abbab'
blank: ' '
start state: verify
synonyms:
  accept: {R: accept}
  reject: {R: reject}
  
table:

  verify: #Verifica se o primeiro espaço está em branco
    ' ': {R: verify} #Pula todos os espaços em branco no começo
    'a': {R: q1} #verifica 'a'
    'b': {R: q0} #verifica 'b'
    
  q0:
    'a': {R: q1} #verifica 'a'
    'b': {R: q0} #verifica 'b'
    ' ': {L: accept} #verifica fim da palavra
    
  q1:
    'b': {R: q2} #1° 'b' encontrado
    'a': reject #rejeita se 'a'
    ' ': reject #rejeita se for vazio

  q2:
    'b': {R: q0} #2° 'b' encontrado, volta para o fluxo
    'a': reject #rejeita se 'a'
    ' ': reject #rejeita se for vazio
    
  accept:
  reject:


#7)  palavra específica
#Exemplo válido: "radar" – Inválido: "robot"

input: 'radar'
blank: ' '
start state: q0
synonyms:
  accept: {R: accept}
  reject: {R: reject}

table:
  q0:
    'r': {R: q1}
    [' ',a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,s,u,t,v,w,x,y,z]: reject

  q1:
    'a': {R: q2}
    [' ',b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,u,t,v,w,x,y,z]: reject
  
  q2:
    'd': {R: q3}
    [' ',a,b,c,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,u,t,v,w,x,y,z]: reject
  
  q3:
    'a': {R: q4}
    [' ',b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,u,t,v,w,x,y,z]: reject
  
  q4:
    'r': {R: q5}
    [' ',a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,s,u,t,v,w,x,y,z]: reject
  
  q5:  
    ' ': {L: accept}
    [a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,u,t,v,w,x,y,z]: reject
  
  accept:
  reject:
  
#8) Mesma quantidade de símbolos de entrada
#Exemplo válido: "001122" – Inválido: "0011222"

input: '00111222'
blank: ' '
start state: busca0
synonyms:
  accept: {R: accept}
  reject: {R: reject}

table:
  busca0:
    '0': {write: 'X', R: busca1} # Se achar '0', troca por 'X" e começa a procurar '1'
    'X': {R: busca0}
    'Y': {R: busca0} #Se encontrar [X,Y,Z], continua procurando
    'Z': {R: busca0}
    ' ': {R: verificaFim} # acabou os 0s, verificar se os outros acabaram também

  busca1:
    '0': {R: busca1} #Pula os '0' e 'X' até achar '1'
    'X': {R: busca1}
    '1': {write: 'Y', R: busca2} #Achando '1', troca por 'Y' e vai buscar por '2'
    'Y': {R: busca1}
    'Z': {R: busca1} #Pula [Y,Z] até achar '1'
    ' ': reject # faltou '1' // Se não achar '1', a cadeia é rejeitada.

  busca2:
    '0': {R: busca2}
    '1': {R: busca2}
    'X': {R: busca2}
    'Y': {R: busca2} #Ignora tudo até achar '2'
    '2': {write: 'Z', L: volta} #troca '2' por 'Z' e volta pro início
    'Z': {R: busca2}
    ' ': reject # faltou '2' // Se não achar '1', a cadeira é rejeitada.

  volta: #Aqui volta pro início de tudo
    [X,Y,Z,0,1,2]: L #vai pra esquerda até o começo
    ' ': {R: busca0} #e começa o processo novamente

  verificaFim:
    'X': {R: verificaFim}
    'Y': {R: verificaFim}
    'Z': {R: verificaFim} #Verifica se todos os números foram trocado por símbolos
    ' ': accept #caso sim, o caso é aceito
    [0,1,2]: reject # ainda tem símbolo não processado

  accept:
  reject:
